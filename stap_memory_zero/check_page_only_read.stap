/*
 * [PID, va_algin_4G, index]
 */

global page_shift = 16
global main_pid = 0;
global va_align_shift  = 0;
global va_align_mask  = 0;
global pa_info_arr;

global pte_pfn_mask = 0;

//@define FAULT_FLAG_WRITE  1;

global fault_flag_write=1

#probe kernel.function("do_exit")
#{
#	if (!is_attach_task()) {
#		next;
#	}
#	foreach([pid, va_align_4G, index] in  pa_info_arr) {
#		delete pa_info_arr[pid, va_align_4G, index]
#	}
#}

function get_va_align_4G:long(addr:long)
{
	return addr >> va_align_shift;
}

function get_va_index:long(addr:long)
{
	return (addr & va_align_mask) >> page_shift;
}

function is_attach_task:long()
{
	return execname() == "main"
}

%{
#include <asm/pgtable.h>
#include <linux/mm.h>
%}

function get_pte_value:long(addr:long) %{
	struct vm_fault *ptr = (struct vm_fault *)STAP_ARG_addr;
	unsigned long *pte_addr = 0;
	unsigned long pte_val = 0;
	if (ptr)
		pte_addr = (unsigned long *)ptr->pte;
	if (pte_addr) {
		pte_val = *pte_addr;
	}
	STAP_RETURN(pte_val);
%}

function pte_is_map_under_4G:long(pte_val:long) {
	return !(pte_val & 0xffff00000000)
	//return 1;
}

probe kernel.function("do_wp_page")
{
	if (!is_attach_task()) {
		next;
	}

	pte = get_pte_value($vmf)

	if (!pte || !pte_is_map_under_4G(pte)) {
		next;
	}
	va_addr = $vmf->address
	va_align_4G = get_va_align_4G(va_addr)
	va_index = get_va_index(va_addr)

	printf("enter do_wp_page , addr(%lx) vmf (%lx) pte (%lx) flags(%x)\n", $vmf->address, $vmf, pte, $vmf->flags);
	
	delete pa_info_arr[pid(), va_align_4G, va_index]
}

probe kernel.function("do_anonymous_page").return
{
	if (!is_attach_task()) {
		next;
	}
	flags = $vmf->flags
	va_addr = $vmf->address

	if (!$vmf->flags & fault_flag_write) {
		next;
	}

	pte = get_pte_value($vmf)

	if (!pte) {
		next;
	}

	if (!pte_is_map_under_4G(pte)) {
		next;
	}
	printf("exit do_anonymous_page, addr(%lx) vmf (%lx) pte (%lx) flags(%x)\n", $vmf->address, $vmf, pte, $vmf->flags);
	va_align_4G = get_va_align_4G(va_addr)
	va_index = get_va_index(va_addr)
	pa_info_arr[pid(), va_align_4G, va_index] = pte
}

probe begin
{
	va_align_shift = page_shift + 6;  		//6 is 64 shift
	va_align_mask = (1 << va_align_shift) - 1;

	pte_pfn_mask = ((1 << page_shift) - 1) ^ ((1 << 48) - 1);

	printf("page_shift(%d) va_align_shift (%d) va_align_mask(0x%lx)\n", 
			page_shift, va_align_shift, va_align_mask);

	printf("pte_pfn_mask(0x%lx)", pte_pfn_mask);
}


probe end
{
	addr = 0;
	foreach ([pid, va_align_4G, index] in pa_info_arr-) {
		addr = (va_align_4G  << va_align_shift)  + (index << page_shift);
		printf("addr is %lx\n", addr)
	}
}

probe timer.ms(2000) 
{
	addr = 0;
	foreach ([pid, va_align_4G, index] in pa_info_arr-) {
		addr = (va_align_4G  << va_align_shift)  + (index << page_shift);
		printf("[%d]the alloc addr(%lx)\n", pid,  addr);
	}
}
