
main.elf：     文件格式 elf32-i386


Disassembly of section .text:

00008c00 <mystart>:
.code16
.text
.global mystart
mystart:
    ljmp $0, $.setcs
    8c00:	ea                   	.byte 0xea
    8c01:	05                   	.byte 0x5
    8c02:	8c 00                	mov    %es,(%eax)
	...

00008c05 <.setcs>:
.setcs:
    xor %ax, %ax
    8c05:	31 c0                	xor    %eax,%eax
    mov %ax, %ds
    8c07:	8e d8                	mov    %eax,%ds
    mov %ax, %es
    8c09:	8e c0                	mov    %eax,%es
    mov %ax, %ss
    8c0b:	8e d0                	mov    %eax,%ss
    mov $0x8c00, %esp
    8c0d:	66 bc 00 8c          	mov    $0x8c00,%sp
    8c11:	00 00                	add    %al,(%eax)
    mov $0xE57, %ax
    8c13:	b8 57 0e cd 10       	mov    $0x10cd0e57,%eax
    int $0x10
    mov $0xE0A, %ax
    8c18:	b8 0a 0e cd 10       	mov    $0x10cd0e0a,%eax
    int $0x10
    cld
    8c1d:	fc                   	cld    
    call main
    8c1e:	e8                   	.byte 0xe8
    8c1f:	34 01                	xor    $0x1,%al

00008c21 <print_ip>:


int print_ip(int ip)
{
    8c21:	66 55                	push   %bp
    8c23:	66 89 e5             	mov    %sp,%bp
    8c26:	66 83 ec 20          	sub    $0x20,%sp
	int tmp = 0;
    8c2a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8c31:	00 00                	add    %al,(%eax)
	int i = 0;
    8c33:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    8c3a:	00 00                	add    %al,(%eax)
	int j = 0;
    8c3c:	67 66 c7 45 f4 00 00 	movw   $0x0,-0xc(%di)
    8c43:	00 00                	add    %al,(%eax)
	char v = 0;
    8c45:	67 c6 45 f3 00       	movb   $0x0,-0xd(%di)
	char buf[16] = {0};
    8c4a:	67 66 c7 45 e3 00 00 	movw   $0x0,-0x1d(%di)
    8c51:	00 00                	add    %al,(%eax)
    8c53:	67 66 c7 45 e7 00 00 	movw   $0x0,-0x19(%di)
    8c5a:	00 00                	add    %al,(%eax)
    8c5c:	67 66 c7 45 eb 00 00 	movw   $0x0,-0x15(%di)
    8c63:	00 00                	add    %al,(%eax)
    8c65:	67 66 c7 45 ef 00 00 	movw   $0x0,-0x11(%di)
    8c6c:	00 00                	add    %al,(%eax)

	tmp = ip;
    8c6e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8c73:	67 66 89 45 fc       	mov    %ax,-0x4(%di)

	buf[i++] = '\n';
    8c78:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    8c7d:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    8c82:	67 66 89 55 f8       	mov    %dx,-0x8(%di)
    8c87:	67 c6 44 05 e3       	movb   $0xe3,0x5(%si)
    8c8c:	0a 67 66             	or     0x66(%edi),%ah

	do {
		v = tmp % 10 + '0';
    8c8f:	8b 4d fc             	mov    -0x4(%ebp),%ecx
    8c92:	66 ba 67 66          	mov    $0x6667,%dx
    8c96:	66 66 66 89 c8       	data16 data16 mov %cx,%ax
    8c9b:	66 f7 ea             	imul   %dx
    8c9e:	66 c1 fa 02          	sar    $0x2,%dx
    8ca2:	66 89 c8             	mov    %cx,%ax
    8ca5:	66 c1 f8 1f          	sar    $0x1f,%ax
    8ca9:	66 29 c2             	sub    %ax,%dx
    8cac:	66 89 d0             	mov    %dx,%ax
    8caf:	66 c1 e0 02          	shl    $0x2,%ax
    8cb3:	66 01 d0             	add    %dx,%ax
    8cb6:	66 01 c0             	add    %ax,%ax
    8cb9:	66 29 c1             	sub    %ax,%cx
    8cbc:	66 89 ca             	mov    %cx,%dx
    8cbf:	66 89 d0             	mov    %dx,%ax
    8cc2:	66 83 c0 30          	add    $0x30,%ax
    8cc6:	67 88 45 f3          	mov    %al,-0xd(%di)
		buf[i] = v;
    8cca:	67 66 8d 55 e3       	lea    -0x1d(%di),%dx
    8ccf:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    8cd4:	66 01 c2             	add    %ax,%dx
    8cd7:	67 66 0f b6 45 f3    	movzbw -0xd(%di),%ax
    8cdd:	67 88 02             	mov    %al,(%bp,%si)
		tmp = tmp / 10;
    8ce0:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    8ce5:	66 ba 67 66          	mov    $0x6667,%dx
    8ce9:	66 66 66 89 c8       	data16 data16 mov %cx,%ax
    8cee:	66 f7 ea             	imul   %dx
    8cf1:	66 c1 fa 02          	sar    $0x2,%dx
    8cf5:	66 89 c8             	mov    %cx,%ax
    8cf8:	66 c1 f8 1f          	sar    $0x1f,%ax
    8cfc:	66 29 c2             	sub    %ax,%dx
    8cff:	66 89 d0             	mov    %dx,%ax
    8d02:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
		i++;
    8d07:	67 66 83 45 f8 01    	addw   $0x1,-0x8(%di)
	}while(tmp != 0);
    8d0d:	67 66 83 7d fc 00    	cmpw   $0x0,-0x4(%di)
    8d13:	0f 85 76 ff 67 66    	jne    66688c8f <__stack_top+0x6667ee8f>
	j = i;
    8d19:	8b 45 f8             	mov    -0x8(%ebp),%eax
    8d1c:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
	while(i >= 0) {
    8d21:	eb 21                	jmp    8d44 <print_ip+0x123>
        	__asm__ (
        	    "int $0x10" : : "a" ((0x0e << 8) | buf[i])
    8d23:	67 66 8d 55 e3       	lea    -0x1d(%di),%dx
    8d28:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    8d2d:	66 01 d0             	add    %dx,%ax
    8d30:	67 66 0f b6 00       	movzbw (%bx,%si),%ax
    8d35:	66 0f be c0          	movsbw %al,%ax
    8d39:	80 cc 0e             	or     $0xe,%ah
        	__asm__ (
    8d3c:	cd 10                	int    $0x10
        	);
		i--;
    8d3e:	67 66 83 6d f8 01    	subw   $0x1,-0x8(%di)
	while(i >= 0) {
    8d44:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    8d4a:	79 d7                	jns    8d23 <print_ip+0x102>
	}

	return j;
    8d4c:	67 66 8b 45 f4       	mov    -0xc(%di),%ax
}
    8d51:	66 c9                	leavew 
    8d53:	66 c3                	retw   

00008d55 <main>:

void main(void) {
    8d55:	66 55                	push   %bp
    8d57:	66 89 e5             	mov    %sp,%bp
    8d5a:	66 83 ec 20          	sub    $0x20,%sp
    int i;
    int ip;
    char s[] = {'h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd'};
    8d5e:	67 c6 45 ed 68       	movb   $0x68,-0x13(%di)
    8d63:	67 c6 45 ee 65       	movb   $0x65,-0x12(%di)
    8d68:	67 c6 45 ef 6c       	movb   $0x6c,-0x11(%di)
    8d6d:	67 c6 45 f0 6c       	movb   $0x6c,-0x10(%di)
    8d72:	67 c6 45 f1 6f       	movb   $0x6f,-0xf(%di)
    8d77:	67 c6 45 f2 20       	movb   $0x20,-0xe(%di)
    8d7c:	67 c6 45 f3 77       	movb   $0x77,-0xd(%di)
    8d81:	67 c6 45 f4 6f       	movb   $0x6f,-0xc(%di)
    8d86:	67 c6 45 f5 72       	movb   $0x72,-0xb(%di)
    8d8b:	67 c6 45 f6 6c       	movb   $0x6c,-0xa(%di)
    8d90:	67 c6 45 f7 64       	movb   $0x64,-0x9(%di)

    __asm__("call NEXT\n\t"
    8d95:	66 e8 00 00          	callw  8d99 <main+0x44>
	...

00008d9b <NEXT>:
    8d9b:	58                   	pop    %eax
    8d9c:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    "NEXT:\n\t"
    "pop %%ax"
    : "=a"(ip));

    i = print_ip(ip);
    8da1:	67 66 ff 75 f8       	pushw  -0x8(%di)
    8da6:	66 e8 75 fe          	callw  8c1f <.setcs+0x1a>
    8daa:	ff                   	(bad)  
    8dab:	ff 66 83             	jmp    *-0x7d(%esi)
    8dae:	c4 04 67             	les    (%edi,%eiz,2),%eax
    8db1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    print_ip(i);
    8db5:	67 66 ff 75 fc       	pushw  -0x4(%di)
    8dba:	66 e8 61 fe          	callw  8c1f <.setcs+0x1a>
    8dbe:	ff                   	(bad)  
    8dbf:	ff 66 83             	jmp    *-0x7d(%esi)
    8dc2:	c4 04 67             	les    (%edi,%eiz,2),%eax
    for (i = 0; i < sizeof(s); ++i) {
    8dc5:	66 c7 45 fc 00 00    	movw   $0x0,-0x4(%ebp)
    8dcb:	00 00                	add    %al,(%eax)
    8dcd:	eb 21                	jmp    8df0 <NEXT+0x55>
        __asm__ (
            "int $0x10" : : "a" ((0x0e << 8) | s[i])
    8dcf:	67 66 8d 55 ed       	lea    -0x13(%di),%dx
    8dd4:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8dd9:	66 01 d0             	add    %dx,%ax
    8ddc:	67 66 0f b6 00       	movzbw (%bx,%si),%ax
    8de1:	66 0f be c0          	movsbw %al,%ax
    8de5:	80 cc 0e             	or     $0xe,%ah
        __asm__ (
    8de8:	cd 10                	int    $0x10
    for (i = 0; i < sizeof(s); ++i) {
    8dea:	67 66 83 45 fc 01    	addw   $0x1,-0x4(%di)
    8df0:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8df5:	66 83 f8 0a          	cmp    $0xa,%ax
    8df9:	76 d4                	jbe    8dcf <NEXT+0x34>
        );
    }
    while (1) {
        __asm__ ("hlt");
    8dfb:	f4                   	hlt    
    8dfc:	eb fd                	jmp    8dfb <NEXT+0x60>
